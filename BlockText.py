#!/usr/bin/python2
#-*- coding: utf-8 -*-

## =====================================================================
## Write text in block letters, this kind of text can be put inside
## a Jobs.Board
##
## Copyright (C) 2014 Jonas MÃ¸ller <shrubber@tfwno.gf>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
## =====================================================================

import Matrix

_ = 0

STANDARD_FONT = {
        "A": [[1,1,1],
              [1,_,1],
              [1,1,1],
              [1,_,1],
              [1,_,1]],

        "B": [[1,1,_],
              [1,_,1],
              [1,1,_],
              [1,_,1],
              [1,1,_]],

        "C": [[1,1,1],
              [1,_,_],
              [1,_,_],
              [1,_,_],
              [1,1,1]],

        "D": [[1,1,_],
              [1,_,1],
              [1,_,1],
              [1,_,1],
              [1,1,_]],

        "E": [[1,1,1],
              [1,_,_],
              [1,1,1],
              [1,_,_],
              [1,1,1]],

        "F": [[1,1,1],
              [1,_,_],
              [1,1,1],
              [1,_,_],
              [1,_,_]],

        "G": [[1,1,1],
              [1,_,_],
              [1,_,_],
              [1,_,1],
              [1,1,1]],

        "H": [[1,_,1],
              [1,_,1],
              [1,1,1],
              [1,_,1],
              [1,_,1]],

        "I": [[1],
              [1],
              [1],
              [1],
              [1]],

        "J": [[_,_,1],
              [_,_,1],
              [_,_,1],
              [1,_,1],
              [_,1,1]],

        "K": [[1,_,1],
              [1,_,1],
              [1,1,_],
              [1,_,1],
              [1,_,1]],

        "L": [[1,_,_],
              [1,_,_],
              [1,_,_],
              [1,_,_],
              [1,1,1]],

        "M": [[1,_,1],
              [1,1,1],
              [1,_,1],
              [1,_,1],
              [1,_,1]],

        "N": [[1,_,_,1],
              [1,1,_,1],
              [1,_,1,1],
              [1,_,_,1],
              [1,_,_,1]],

        "O": [[1,1,1],
              [1,_,1],
              [1,_,1],
              [1,_,1],
              [1,1,1]],

        "P": [[1,1,1],
              [1,_,1],
              [1,1,1],
              [1,_,_],
              [1,_,_]],

        "Q": [[1,1,1,1],
              [1,_,_,1],
              [1,_,_,1],
              [1,_,1,1],
              [1,1,1,_]],

        "R": [[1,1,1],
              [1,_,1],
              [1,1,_],
              [1,_,1],
              [1,_,1]],

        "S": [[1,1,1],
              [1,_,_],
              [_,1,_],
              [_,_,1],
              [1,1,1]],

        "T": [[1,1,1],
              [_,1,_],
              [_,1,_],
              [_,1,_],
              [_,1,_]],

        "U": [[1,_,1],
              [1,_,1],
              [1,_,1],
              [1,_,1],
              [1,1,1]],

        "V": [[1,_,1],
              [1,_,1],
              [1,_,1],
              [1,_,1],
              [_,1,_]],

        "W": [[1,_,1,_,1],
              [1,_,1,_,1],
              [1,_,1,_,1],
              [1,_,1,_,1],
              [_,1,_,1,_]],

        "X": [[1,_,1],
              [1,_,1],
              [_,1,_],
              [1,_,1],
              [1,_,1]],

        "Y": [[1,_,1],
              [1,_,1],
              [_,1,_],
              [_,1,_],
              [_,1,_]],

        "Z": [[1,1,1],
              [_,_,1],
              [_,1,_],
              [1,_,_],
              [1,1,1]],

        "1": [[_,1,_],
              [1,1,_],
              [_,1,_],
              [_,1,_],
              [1,1,1]],

        "2": [[_,1,_],
              [1,_,1],
              [_,_,1],
              [_,1,_],
              [1,1,1]],

        "3": [[1,1,_],
              [_,_,1],
              [_,1,_],
              [_,_,1],
              [1,1,_]],

        "4": [[1,_,1],
              [1,_,1],
              [1,1,1],
              [_,_,1],
              [_,_,1]],

        "5": [[1,1,1],
              [1,_,_],
              [_,1,1],
              [_,_,1],
              [1,1,_]],

        "6": [[_,1,1],
              [1,_,_],
              [1,1,_],
              [1,_,1],
              [_,1,_]],

        "7": [[1,1,1],
              [_,_,1],
              [_,1,_],
              [_,1,_],
              [_,1,_]],

        "8": [[1,1,1],
              [1,_,1],
              [_,1,_],
              [1,_,1],
              [1,1,1]],

        "9": [[_,1,_],
              [1,_,1],
              [_,1,1],
              [_,_,1],
              [_,_,1]],

        "+": [[_,_,_],
              [_,1,_],
              [1,1,1],
              [_,1,_],
              [_,_,_]],

        "-": [[_,_,_],
              [_,_,_],
              [1,1,1],
              [_,_,_],
              [_,_,_]],

        "_": [[_,_,_],
              [_,_,_],
              [_,_,_],
              [_,_,_],
              [1,1,1]],

        ";": [[_,_,_],
              [_,1,_],
              [_,_,_],
              [_,1,_],
              [1,_,_]],

        "!": [[1],
              [1],
              [1],
              [_],
              [1]],

        ".": [[_],
              [_],
              [_],
              [_],
              [1]],

        ":": [[_],
              [1],
              [_],
              [1],
              [_]],

        "/": [[_,_,1],
              [_,_,1],
              [_,1,_],
              [1,_,_],
              [1,_,_]],

        "\\": [[1,_,_],
               [1,_,_],
               [_,1,_],
               [_,_,1],
               [_,_,1]],

        "?": [[1,1,1],
              [_,_,1],
              [_,1,_],
              [_,_,_],
              [_,1,_]],

        "(": [[_,1],
              [1,_],
              [1,_],
              [1,_],
              [_,1]],

        ")": [[1,_],
              [_,1],
              [_,1],
              [_,1],
              [1,_]],

        "]": [[1,1],
              [_,1],
              [_,1],
              [_,1],
              [1,1]],

        "[": [[1,1],
              [1,_],
              [1,_],
              [1,_],
              [1,1]],

        "*": [[1,_,_,1],
              [_,1,1,_],
              [_,1,1,_],
              [1,_,_,1],
              [_,_,_,_]],

        "*": [[_,1,_],
              [1,_,1],
              [_,_,_],
              [_,_,_],
              [_,_,_]],

        "|": [[1],
              [1],
              [1],
              [1],
              [1]],

        '"': [[1,_,1],
              [1,_,1],
              [_,_,_],
              [_,_,_],
              [_,_,_]],

        "'": [[1],
              [1],
              [_],
              [_],
              [_]],

        "=": [[_,_,_],
              [1,1,1],
              [_,_,_],
              [1,1,1],
              [_,_,_]],

        " ": [[_],
              [_],
              [_],
              [_],
              [_]],

        "#": [[_,1,_,1,_],
              [1,1,1,1,1],
              [_,1,_,1,_],
              [1,1,1,1,1],
              [_,1,_,1,_]],

        "invalid": [[1,1,1],
                    [_,1,_],
                    [1,_,1],
                    [_,1,_],
                    [1,1,1]],
        }

def getChar(char, font):
    if char.islower() and not font.get(char):
        return font.get(char.upper())
    if char.isupper() and not font.get(char):
        return font.get(char.lower())

    if font.get(char):
        return font[char]
    else:
        return font["invalid"]

def render(text, font, spaces=1, padding=False):
    rows = len(getChar("a", font))
    matrix = [[] for _ in xrange(rows)]
    if spaces:
        spacer = [[False for _ in xrange(spaces)] for _ in xrange(rows)]
    last = len(text); i = 0
    if padding:
        Matrix.append(matrix, spacer)
    for char in text:
        i += 1
        letter_matrix = getChar(char, font)
        Matrix.append(matrix, letter_matrix)
        if spaces and (i != last or padding):
            Matrix.append(matrix, spacer)
    return matrix

# def loadFontFile(buf):
# 

if __name__ == '__main__':
    Matrix.put(render("woot", STANDARD_FONT))
